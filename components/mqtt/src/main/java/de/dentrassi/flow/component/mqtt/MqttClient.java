/*******************************************************************************
 * Copyright (c) 2017 Red Hat Inc and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Jens Reimann - initial API and implementation
 *******************************************************************************/
package de.dentrassi.flow.component.mqtt;

import java.util.Map;

import de.dentrassi.flow.ComponentContext;
import de.dentrassi.flow.ComponentContext.SharedResource;
import de.dentrassi.flow.spi.component.AnnotatedComponent;
import de.dentrassi.flow.spi.component.DataIn;
import de.dentrassi.flow.spi.component.DataOut;
import de.dentrassi.flow.spi.component.TriggerIn;
import io.vertx.core.Vertx;
import io.vertx.mqtt.MqttClientOptions;

public class MqttClient extends AnnotatedComponent {

    private String host;
    private int port;
    private String clientId;
    private String username;
    private String password;

    private SharedResource<Vertx> vertx;
    private io.vertx.mqtt.MqttClient client;

    public MqttClient() {
        super();

        registerTriggerOut("connected");
    }

    @Override
    public void start(final Map<String, String> initializers, final ComponentContext context) {
        super.start(initializers, context);
        this.vertx = context.createSharedResource(MqttClient.class, "vertx", Vertx.class, () -> Vertx.vertx(),
                Vertx::close);
    }

    @Override
    public void stop() {
        disconnect();
        this.vertx.close();
        super.stop();
    }

    @TriggerIn
    public void connect() {
        final MqttClientOptions options = new MqttClientOptions();

        if (this.clientId != null) {
            options.setAutoGeneratedClientId(false);
            options.setClientId(this.clientId);
        } else {
            options.setAutoGeneratedClientId(true);
        }

        options.setAutoKeepAlive(true);
        options.setUsername(this.username);
        options.setPassword(this.password);

        this.client = io.vertx.mqtt.MqttClient.create(this.vertx.get(), options);
        this.client.connect(this.port, this.host, connected -> {
            connected();
        });
    }

    @TriggerIn
    public void disconnect() {
        this.client.disconnect();
    }

    private void connected() {
        triggerOut("connected");
    }

    @DataIn
    public void setHost(final String host) {
        this.host = host;
    }

    @DataIn
    public void setPort(final String port) {
        this.port = port == null ? 1883 : Integer.parseInt(port);
    }

    @DataIn
    public void setClientId(final String clientId) {
        this.clientId = clientId;
    }

    @DataIn
    public void setUsername(final String username) {
        this.username = username;
    }

    @DataIn
    public void setPassword(final String password) {
        this.password = password;
    }

    @DataOut
    public io.vertx.mqtt.MqttClient getClient() {
        return this.client;
    }
}
